const cron = require("node-cron");
const axios = require("axios");
const SupportLevel = require("../models/supLevel.model");
require("dotenv").config();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô
const getStockPrice = async (symbol) => {
    try {
        const options = {
            method: 'GET',
            url: `${process.env.RAPIDAPI_HOST}/price/${symbol}`,
            headers: {
                'x-rapidapi-key': process.env.RAPIDAPI_KEY,
                'x-rapidapi-host': process.env.RAPIDAPI_HOST_AUTH
            }
        };

        const response = await axios.request(options);
        return response.data.regularMarketPrice;
    } catch (error) {
        console.error(`‚ùå Error fetching price for ${symbol}:`, error);
        return null;
    }
};

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cron Job ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
cron.schedule("*/5 * * * *", async () => {
    console.log("üîç Checking stock prices...");

    const supportLevels = await SupportLevel.find({ notify: true });

    for (const stock of supportLevels) {
        const currentPrice = await getStockPrice(stock.symbol);
        console.log(parseInt(currentPrice.raw));
        if (currentPrice !== null && parseInt(currentPrice.raw) <= parseInt(stock.supportPrice)) {
            console.log(`üö® Alert! ${stock.symbol} reached support level: ${currentPrice}`);

            // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Email ‡∏´‡∏£‡∏∑‡∏≠ LINE Notify)
            await sendNotification(stock.symbol, currentPrice.raw);

            // ‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡πÅ‡∏õ‡∏°
            // await SupportLevel.findOneAndUpdate({ symbol: stock.symbol }, { notify: false });
        }
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ LINE Notify ‡∏´‡∏£‡∏∑‡∏≠ Email)
const sendNotification = async (symbol, price) => {
    try {
        const message = `üìâ ‡∏´‡∏∏‡πâ‡∏ô ${symbol} ‡∏£‡πà‡∏ß‡∏á‡∏ñ‡∏∂‡∏á‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà ${price} ‡πÅ‡∏•‡πâ‡∏ß!`;

        // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE Notify
        await axios.post("https://notify-api.line.me/api/notify", `message=${message}`, {
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": `Bearer ${process.env.LINE_NOTIFY_TOKEN}`
            }
        });

        console.log("‚úÖ Notification sent!");
    } catch (error) {
        console.error("‚ùå Failed to send notification:", error);
    }
};
